{"name":"The Robotarium Project","tagline":"Now in closed alpha!","body":"# What is the Robotarium?\r\nThe Robotarium project's objective is to make an online, robotics platform that remains freely accessible to anyone. Robotics research currently involves massive investments to competitively participate. However, we believe that anyone with new, amazing ideas should be able to see their algorithms deployed on real robots, rather than purely simulated. In order to make this vision possible, we are creating a remote-access, robotics lab where anyone can upload and test their ideas on real hardware\r\n\r\n## How do I get involved?\r\nThe Robotarium is now open for business! Currently the Robotarium is in closed alpha. In order to be a tester contact [Zak Costello](mailto:zak.costello@gmail.com) or [Magnus Egerstedt](mailto:magnus@ece.gatech.edu).\r\n\r\n## How is it used? \r\nThe Robotarium supplies MATLAB and Python APIs for algorithm deployment.  Here's a vanilla consensus algorithm in the MATLAB API   \r\n```matlab\r\n% Declare number of robots\r\nN = 7;\r\n\r\n% Initialize Robotarium\r\nrobotarium = Robotarium(N);\r\n\r\n% Graph Laplacian for a complete graph\r\nL = ones(N, N) - N * eye(N);\r\n\r\nwhile(true)\r\n  \r\n\t% Get the latest pose data from the robots in format 3 x N\r\n\tx = robotarium.getPoses()\r\n\r\n\t% Calculate the control input for the continuous-time consensus\r\n\t% dynamics in 2 dimensions\r\n\tdx = kron(eye(2), L) * [x(1, :)' ; x(2, :)'];\r\n\r\n\t% Restructure data\r\n\tdx = [dx(1:N)' ; dx(N+1:(2*N))'];\r\n\r\n\t% Use a provided diffeomorphism to transform \r\n\t% single-integrator to unicycle dynamics\r\n\tdx = diffeomorphism(dx, x);\r\n\r\n\t% Set the velocities of the robots\r\n\trobotarium.setVelocities(dx);\r\n \r\nend\r\n```\r\n\r\n### Social Media \r\n[Twitter](https://twitter.com/robotariumorg)  \r\n\r\n[YouTube] (https://www.youtube.com/channel/UC95etX3555MyNyOjoWHKFXg)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}